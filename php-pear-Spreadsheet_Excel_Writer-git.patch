diff -urN Spreadsheet_Excel_Writer-0.9.3.org/Spreadsheet/Excel/Writer/Worksheet.php Spreadsheet_Excel_Writer-0.9.3/Spreadsheet/Excel/Writer/Worksheet.php
--- Spreadsheet_Excel_Writer-0.9.3.org/Spreadsheet/Excel/Writer/Worksheet.php	2012-01-26 03:12:56.000000000 +0100
+++ Spreadsheet_Excel_Writer-0.9.3/Spreadsheet/Excel/Writer/Worksheet.php	2014-06-18 10:55:21.000000000 +0200
@@ -1629,20 +1629,25 @@
     */
     function writeStringBIFF8($row, $col, $str, $format = null)
     {
+        // If the string is Unicode and contains any "surrogate pairs" then using mb_strlen($str, 'UTF-16LE')
+        // as the string length will cause a "found unreadable content" error when opening the worksheet in Excel
+        // (apparently the length is expected to be the number of 16-bit code points, not the number of characters).
+        // Instead, always use the byte length divided by two for Unicode strings, and if mb_strlen() exists use
+        // mb_strlen($str, '8bit') just in case mbstring.func_overload is set to overload strlen().
         if ($this->_input_encoding == 'UTF-16LE')
         {
-            $strlen = function_exists('mb_strlen') ? mb_strlen($str, 'UTF-16LE') : (strlen($str) / 2);
+            $strlen = (function_exists('mb_strlen') ? mb_strlen($str, '8bit') : strlen($str)) / 2;
             $encoding  = 0x1;
         }
         elseif ($this->_input_encoding != '')
         {
             $str = iconv($this->_input_encoding, 'UTF-16LE', $str);
-            $strlen = function_exists('mb_strlen') ? mb_strlen($str, 'UTF-16LE') : (strlen($str) / 2);
+            $strlen = (function_exists('mb_strlen') ? mb_strlen($str, '8bit') : strlen($str)) / 2;
             $encoding  = 0x1;
         }
         else
         {
-            $strlen    = strlen($str);
+            $strlen    = function_exists('mb_strlen') ? mb_strlen($str, '8bit') : strlen($str);
             $encoding  = 0x0;
         }
         $record    = 0x00FD;                   // Record identifier
@@ -2484,10 +2489,10 @@
             $length   = 2 + count($ranges) * 8; 
             $header   = pack('vv', $record, $length);
             $data     = pack('v',  count($ranges));
-            foreach($ranges as $range) 
+            foreach ($ranges as $range) 
               $data .= pack('vvvv', $range[0], $range[2], $range[1], $range[3]);
-            $string=$header.$data;
-            $this->_append(&$string, true);
+            $string = $header.$data;
+            $this->_append($string, true);
           }
     }
 
